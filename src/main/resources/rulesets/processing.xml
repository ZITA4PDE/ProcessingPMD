<?xml version="1.0"?>
<ruleset name="Processing Ruleset"
		 xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
	<description>
		Ruleset with custom rules specific to Processing code.
		Developed as part of the "The Smell of Poor Design" bachelor research project.
	</description>

	<rule name="DecentralizedDrawingRule"
		  message="Do not use drawing method {0} in method {1}, {1} is called outside of the draw sequence and can therefore not contain drawing methods."
		  class="nl.utwente.processing.pmdrules.DecentralizedDrawingRule">
		<description>
			Methods that draw on screen should only be called from drawing methods: methods that are (indirectly) called
			solely by the draw method.
		</description>
		<priority>3</priority>
		<example>
			<![CDATA[
				float x, y, x2, y2;

				void setup() {
					//Wrong: Do not use drawing functions from non-drawing methods.
					rect(x, y, x2, y2);
				}
			]]>
		</example>
	</rule>

	<rule name="DrawingStateChangeRule"
		  message="Do not change global variable {0} from method {1}, {1} is part of the draw sequence."
		  class="nl.utwente.processing.pmdrules.DrawingStateChangeRule">
		<description>
			Global variables of the sketch should not be changed from the draw method or methods (indirectly) called
			from the draw method.
		</description>
		<priority>3</priority>
		<example>
			<![CDATA[
			    private float alpha;

				void setup() {
					alpha = 0.5;
				}

				void draw() {
					//Wrong: Do not change global scoped variables inside the draw method.
				    alpha += 0.5;
				}
			]]>
		</example>
	</rule>

	<rule name="DecentralizedEventHandlingRule"
		  message="Do not use global event variable {0} in method {1}, {1} is not part of the event handling methods."
		  class="nl.utwente.processing.pmdrules.DecentralizedEventHandlingRule">
		<description>
			Global event handling variables should only be used inside the specified event handler methods.
		</description>
		<priority>3</priority>
		<example>
			<![CDATA[
				void draw() {
				    //Wrong: Do not use mouseX, mouseY outside event handlers
				    rect(mouseX, mouseY, mouseX + 20, mouseY + 20);
				}
			]]>
		</example>
	</rule>

	<rule name="PixelHardcodeIgnoranceRule"
		  message="Do not use literals for pixels for {0} inside method {1}."
		  class="nl.utwente.processing.pmdrules.PixelHardcodeIgnoranceRule">
		<description>
			Drawing functions should not use pixels, but constants or variables instead.
		</description>
		<priority>3</priority>
		<example>
			<![CDATA[
				void draw() {
				    //Wrong: Do not use hardcoded pixels.
				    rect(10, 10, 20, 20);
				}
			]]>
		</example>
	</rule>

	<rule name="StatelessClassRule"
		  message="Class {0} does not declare any fields. The class should be removed by moving methods to the global scope."
		  class="nl.utwente.processing.pmdrules.StatelessClassRule">
		<description>
			Stateless classes are not allowed. Utility classes with only methods should define their methods in the
			top class (global scope).
		</description>
		<priority>3</priority>
		<example>
			<![CDATA[
				//Wrong: This class has no fields and is stateless.
				class Stateless {
					void draw() {
						rect(20, 30, 10, 10);
					}
				}
			]]>
		</example>
	</rule>

	<rule name="LongMethodRule"
		  message="The method {0} is too long, {1} lines of code are counted. The method should be made more efficient or split in multiple methods."
		  class="nl.utwente.processing.pmdrules.LongMethodRule">
		<description>
			Methods longer than a certain amount of rules (25 by default) should be split into seperate method calls.
		</description>
		<priority>3</priority>
		<example>
			<![CDATA[
				void method() {
					//Wrong: method is too long.
					println("T")
					println("h")
					println("i")
					println("s")
					println("")
					println("m")
					println("e")
					println("t")
					println("h")
					println("o")
					println("d")
					println("")
					println("i")
					println("s")
					println("")
					println("w")
					println("a")
					println("y")
					println("")
					println("t")
					println("o")
					println("o")
					println("")
					println("l")
					println("o")
					println("n")
					println("g")
				}
			]]>
		</example>
	</rule>

	<rule name="LongParameterListRule"
		  message="The method {0} has too many parameters, {1} are counted. The parameters should be merged into objects or the method should be split."
		  class="nl.utwente.processing.pmdrules.LongParameterListRule">
		<description>
			Methods should not accept more than a specified amount of parameters (5 by default).
		</description>
		<priority>3</priority>
		<example>
			<![CDATA[
				void correct(int x1, int x2, int y1, int y2, int r) {
					//Correct, 5 parameters.
				}
				void incorrect(int x1, int x2, int z1, int y1, int y2, int z2) {
					//Wrong: 6 parameters.
				}
			]]>
		</example>
	</rule>

	<rule name="GodClassRule"
		  message="The class {0} has too much responsibility. The program design should be reconsidered (God Class, WMC={1}, ATFD={2}, TCC={3})"
		  class="nl.utwente.processing.pmdrules.GodClassRule">
		<description>
			Classes should not become a God Class, e.g. they should not take total responsibility for the whole application.
		</description>
		<priority>3</priority>
	</rule>
</ruleset>